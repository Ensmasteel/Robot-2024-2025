
PAMI-BatBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000229c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800235c  0800235c  0000335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800239c  0800239c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800239c  0800239c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800239c  0800239c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800239c  0800239c  0000339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023a0  080023a0  000033a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080023a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080023b0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080023b0  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000895d  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e9  00000000  00000000  0000c991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0000e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ff  00000000  00000000  0000ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ef4  00000000  00000000  0000f2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba3c  00000000  00000000  000221a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077bdc  00000000  00000000  0002dbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a57bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002088  00000000  00000000  000a5800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a7888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002344 	.word	0x08002344

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002344 	.word	0x08002344

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb8e 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f8d1 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9f5 	bl	800061c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000232:	f000 f911 	bl	8000458 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000236:	f000 f9b1 	bl	800059c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t previous_tick = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t blink_interval = 500; // 500 ms
 800023e:	23fa      	movs	r3, #250	@ 0xfa
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	623b      	str	r3, [r7, #32]

  uint32_t Bouton_interval = 100;
 8000244:	2364      	movs	r3, #100	@ 0x64
 8000246:	613b      	str	r3, [r7, #16]
  uint32_t previous_tick_But = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	61fb      	str	r3, [r7, #28]

  _Bool FirstTime = 1;
 800024c:	231b      	movs	r3, #27
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	2201      	movs	r2, #1
 8000252:	701a      	strb	r2, [r3, #0]
  _Bool ButtonPressed = 0;
 8000254:	231a      	movs	r3, #26
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
  _Bool ButtonLongPressed = 0;
 800025c:	2319      	movs	r3, #25
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
  _Bool ButtonPreviousState = 0;
 8000264:	2318      	movs	r3, #24
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
  uint32_t LongPress_tick = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]


  HAL_GPIO_WritePin(Stop_GPIO_Port, Stop_Pin, !StopActif);
 8000270:	23a0      	movs	r3, #160	@ 0xa0
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2201      	movs	r2, #1
 8000276:	2110      	movs	r1, #16
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fa96 	bl	80017aa <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      uint32_t current_tick = HAL_GetTick();
 800027e:	f000 fbd5 	bl	8000a2c <HAL_GetTick>
 8000282:	0003      	movs	r3, r0
 8000284:	60fb      	str	r3, [r7, #12]
	  if ((current_tick - previous_tick) >= blink_interval)
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	6a3a      	ldr	r2, [r7, #32]
 800028e:	429a      	cmp	r2, r3
 8000290:	d80a      	bhi.n	80002a8 <main+0x88>
	  {
	     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Replace with your LED pin
 8000292:	23a0      	movs	r3, #160	@ 0xa0
 8000294:	05db      	lsls	r3, r3, #23
 8000296:	2180      	movs	r1, #128	@ 0x80
 8000298:	0018      	movs	r0, r3
 800029a:	f001 faa3 	bl	80017e4 <HAL_GPIO_TogglePin>
	     previous_tick = current_tick;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	627b      	str	r3, [r7, #36]	@ 0x24
	     blink_interval = IntervalLed;
 80002a2:	23fa      	movs	r3, #250	@ 0xfa
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	623b      	str	r3, [r7, #32]
	     }

	  if ((current_tick - previous_tick_But) >= Bouton_interval)
 80002a8:	68fa      	ldr	r2, [r7, #12]
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	1ad3      	subs	r3, r2, r3
 80002ae:	693a      	ldr	r2, [r7, #16]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d847      	bhi.n	8000344 <main+0x124>
	  {
	      previous_tick_But = current_tick;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	61fb      	str	r3, [r7, #28]

	      _Bool Button = !HAL_GPIO_ReadPin(Bouton_GPIO_Port, Bouton_Pin); // bouton en pull-up → 1 si appuyé
 80002b8:	23a0      	movs	r3, #160	@ 0xa0
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2120      	movs	r1, #32
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fa56 	bl	8001770 <HAL_GPIO_ReadPin>
 80002c4:	0003      	movs	r3, r0
 80002c6:	001a      	movs	r2, r3
 80002c8:	200b      	movs	r0, #11
 80002ca:	183b      	adds	r3, r7, r0
 80002cc:	4251      	negs	r1, r2
 80002ce:	414a      	adcs	r2, r1
 80002d0:	701a      	strb	r2, [r3, #0]

	      // Initialiser à 0 à chaque cycle de traitement
	      ButtonPressed = 0;
 80002d2:	211a      	movs	r1, #26
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	      ButtonLongPressed = 0;
 80002da:	2319      	movs	r3, #25
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]

	      // Front descendant : non appuyé → appuyé
	      if (Button && !ButtonPreviousState)
 80002e2:	183b      	adds	r3, r7, r0
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d00d      	beq.n	8000306 <main+0xe6>
 80002ea:	2318      	movs	r3, #24
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4053      	eors	r3, r2
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d005      	beq.n	8000306 <main+0xe6>
	      {
	          LongPress_tick = current_tick;  // Enregistrer le moment de l'appui
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	617b      	str	r3, [r7, #20]
	          ButtonPressed = 1;              // Détection immédiate
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
 8000304:	e018      	b.n	8000338 <main+0x118>
	      }

	      // Front montant : appuyé → relâché
	      else if (!Button && ButtonPreviousState)
 8000306:	230b      	movs	r3, #11
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2201      	movs	r2, #1
 800030e:	4053      	eors	r3, r2
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2b00      	cmp	r3, #0
 8000314:	d010      	beq.n	8000338 <main+0x118>
 8000316:	2318      	movs	r3, #24
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d00b      	beq.n	8000338 <main+0x118>
	      {
	          uint32_t pressDuration = current_tick - LongPress_tick;
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	607b      	str	r3, [r7, #4]

	          if (pressDuration >= LongPressDuration)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a27      	ldr	r2, [pc, #156]	@ (80003c8 <main+0x1a8>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d903      	bls.n	8000338 <main+0x118>
	          {
	              ButtonLongPressed = 1;
 8000330:	2319      	movs	r3, #25
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]
	          }
	      }

	      // Met à jour l’état précédent pour la prochaine itération
	      ButtonPreviousState = Button;
 8000338:	2318      	movs	r3, #24
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	220b      	movs	r2, #11
 800033e:	18ba      	adds	r2, r7, r2
 8000340:	7812      	ldrb	r2, [r2, #0]
 8000342:	701a      	strb	r2, [r3, #0]
	  }


	  if (FirstTime && ButtonPressed)
 8000344:	221b      	movs	r2, #27
 8000346:	18bb      	adds	r3, r7, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d012      	beq.n	8000374 <main+0x154>
 800034e:	241a      	movs	r4, #26
 8000350:	193b      	adds	r3, r7, r4
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d00d      	beq.n	8000374 <main+0x154>
	  {
		 // premiere activation
         FirstTime = 0;
 8000358:	18bb      	adds	r3, r7, r2
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
         HAL_GPIO_WritePin(Stop_GPIO_Port, Stop_Pin, StopActif);
 800035e:	23a0      	movs	r3, #160	@ 0xa0
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	2200      	movs	r2, #0
 8000364:	2110      	movs	r1, #16
 8000366:	0018      	movs	r0, r3
 8000368:	f001 fa1f 	bl	80017aa <HAL_GPIO_WritePin>

         //value reset
         ButtonPressed = 0;
 800036c:	193b      	adds	r3, r7, r4
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	e028      	b.n	80003c6 <main+0x1a6>
	  }
	  else if (ButtonPressed)
 8000374:	241a      	movs	r4, #26
 8000376:	193b      	adds	r3, r7, r4
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d00a      	beq.n	8000394 <main+0x174>
	  {
		  // on doit couper le signal
		  HAL_GPIO_WritePin(Stop_GPIO_Port, Stop_Pin, !StopActif);
 800037e:	23a0      	movs	r3, #160	@ 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	0018      	movs	r0, r3
 8000388:	f001 fa0f 	bl	80017aa <HAL_GPIO_WritePin>

		  //value reset
		  ButtonPressed = 0;
 800038c:	193b      	adds	r3, r7, r4
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
 8000392:	e774      	b.n	800027e <main+0x5e>
	  }
	  else if (ButtonLongPressed)
 8000394:	2419      	movs	r4, #25
 8000396:	193b      	adds	r3, r7, r4
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d100      	bne.n	80003a0 <main+0x180>
 800039e:	e76e      	b.n	800027e <main+0x5e>
	  {
		  // on réarme le robot
		  HAL_GPIO_WritePin(Stop_GPIO_Port, Stop_Pin, StopActif);
 80003a0:	23a0      	movs	r3, #160	@ 0xa0
 80003a2:	05db      	lsls	r3, r3, #23
 80003a4:	2200      	movs	r2, #0
 80003a6:	2110      	movs	r1, #16
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 f9fe 	bl	80017aa <HAL_GPIO_WritePin>


		  // force l'alumage pendant la durée longue
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80003ae:	23a0      	movs	r3, #160	@ 0xa0
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	2201      	movs	r2, #1
 80003b4:	2180      	movs	r1, #128	@ 0x80
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 f9f7 	bl	80017aa <HAL_GPIO_WritePin>
		  blink_interval = IntervalLed_Long;
 80003bc:	4b03      	ldr	r3, [pc, #12]	@ (80003cc <main+0x1ac>)
 80003be:	623b      	str	r3, [r7, #32]

		  //value reset
		  ButtonLongPressed = 0;
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
  {
 80003c6:	e75a      	b.n	800027e <main+0x5e>
 80003c8:	00001387 	.word	0x00001387
 80003cc:	00001388 	.word	0x00001388

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b08d      	sub	sp, #52	@ 0x34
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	2414      	movs	r4, #20
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	231c      	movs	r3, #28
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f001 ff83 	bl	80022ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	003b      	movs	r3, r7
 80003e8:	0018      	movs	r0, r3
 80003ea:	2314      	movs	r3, #20
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f001 ff7c 	bl	80022ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	2202      	movs	r2, #2
 80003f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	2280      	movs	r2, #128	@ 0x80
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000402:	193b      	adds	r3, r7, r4
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000408:	193b      	adds	r3, r7, r4
 800040a:	2240      	movs	r2, #64	@ 0x40
 800040c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	193b      	adds	r3, r7, r4
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fb41 	bl	8001a98 <HAL_RCC_OscConfig>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800041a:	f000 f95f 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	003b      	movs	r3, r7
 8000420:	2207      	movs	r2, #7
 8000422:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000430:	003b      	movs	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043c:	003b      	movs	r3, r7
 800043e:	2101      	movs	r1, #1
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fd0d 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800044a:	f000 f947 	bl	80006dc <Error_Handler>
  }
}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b00d      	add	sp, #52	@ 0x34
 8000454:	bd90      	pop	{r4, r7, pc}
	...

08000458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	230c      	movs	r3, #12
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f001 ff40 	bl	80022ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800046c:	4b45      	ldr	r3, [pc, #276]	@ (8000584 <MX_ADC1_Init+0x12c>)
 800046e:	4a46      	ldr	r2, [pc, #280]	@ (8000588 <MX_ADC1_Init+0x130>)
 8000470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000472:	4b44      	ldr	r3, [pc, #272]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	05d2      	lsls	r2, r2, #23
 8000478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800047a:	4b42      	ldr	r3, [pc, #264]	@ (8000584 <MX_ADC1_Init+0x12c>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000480:	4b40      	ldr	r3, [pc, #256]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000486:	4b3f      	ldr	r3, [pc, #252]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	0612      	lsls	r2, r2, #24
 800048c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800048e:	4b3d      	ldr	r3, [pc, #244]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000490:	2204      	movs	r2, #4
 8000492:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000494:	4b3b      	ldr	r3, [pc, #236]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000496:	2200      	movs	r2, #0
 8000498:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800049a:	4b3a      	ldr	r3, [pc, #232]	@ (8000584 <MX_ADC1_Init+0x12c>)
 800049c:	2200      	movs	r2, #0
 800049e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004a0:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80004a6:	4b37      	ldr	r3, [pc, #220]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ac:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004ae:	2220      	movs	r2, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b4:	4b33      	ldr	r3, [pc, #204]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ba:	4b32      	ldr	r3, [pc, #200]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004c0:	4b30      	ldr	r3, [pc, #192]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004c2:	222c      	movs	r2, #44	@ 0x2c
 80004c4:	2100      	movs	r1, #0
 80004c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80004ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004d6:	223c      	movs	r2, #60	@ 0x3c
 80004d8:	2100      	movs	r1, #0
 80004da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004dc:	4b29      	ldr	r3, [pc, #164]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e2:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <MX_ADC1_Init+0x12c>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fba9 	bl	8000c3c <HAL_ADC_Init>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80004ee:	f000 f8f5 	bl	80006dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2201      	movs	r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2201      	movs	r2, #1
 80004fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fe:	1d3a      	adds	r2, r7, #4
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fd3f 	bl	8000f88 <HAL_ADC_ConfigChannel>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800050e:	f000 f8e5 	bl	80006dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4a1d      	ldr	r2, [pc, #116]	@ (800058c <MX_ADC1_Init+0x134>)
 8000516:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000518:	1d3a      	adds	r2, r7, #4
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_ADC1_Init+0x12c>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fd32 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000528:	f000 f8d8 	bl	80006dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4a18      	ldr	r2, [pc, #96]	@ (8000590 <MX_ADC1_Init+0x138>)
 8000530:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	1d3a      	adds	r2, r7, #4
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fd25 	bl	8000f88 <HAL_ADC_ConfigChannel>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000542:	f000 f8cb 	bl	80006dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <MX_ADC1_Init+0x13c>)
 800054a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	1d3a      	adds	r2, r7, #4
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <MX_ADC1_Init+0x12c>)
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fd18 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800055c:	f000 f8be 	bl	80006dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <MX_ADC1_Init+0x140>)
 8000564:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000566:	1d3a      	adds	r2, r7, #4
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_ADC1_Init+0x12c>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fd0b 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000576:	f000 f8b1 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b004      	add	sp, #16
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	20000028 	.word	0x20000028
 8000588:	40012400 	.word	0x40012400
 800058c:	04000002 	.word	0x04000002
 8000590:	08000004 	.word	0x08000004
 8000594:	0c000008 	.word	0x0c000008
 8000598:	a4000200 	.word	0xa4000200

0800059c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <MX_I2C1_Init+0x78>)
 80005a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000618 <MX_I2C1_Init+0x7c>)
 80005aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 f91f 	bl	800181c <HAL_I2C_Init>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005e2:	f000 f87b 	bl	80006dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f9bc 	bl	8001968 <HAL_I2CEx_ConfigAnalogFilter>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005f4:	f000 f872 	bl	80006dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <MX_I2C1_Init+0x74>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 f9ff 	bl	8001a00 <HAL_I2CEx_ConfigDigitalFilter>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000606:	f000 f869 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000008c 	.word	0x2000008c
 8000614:	40005400 	.word	0x40005400
 8000618:	10805d88 	.word	0x10805d88

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f001 fe5d 	bl	80022ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000650:	2104      	movs	r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2204      	movs	r2, #4
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Stop_Pin|ChargeLed_Pin|LED_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	21d0      	movs	r1, #208	@ 0xd0
 8000682:	0018      	movs	r0, r3
 8000684:	f001 f891 	bl	80017aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Stop_Pin ChargeLed_Pin LED_Pin */
  GPIO_InitStruct.Pin = Stop_Pin|ChargeLed_Pin|LED_Pin;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	22d0      	movs	r2, #208	@ 0xd0
 800068c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2201      	movs	r2, #1
 8000692:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	193a      	adds	r2, r7, r4
 80006a2:	23a0      	movs	r3, #160	@ 0xa0
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fef7 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : Bouton_Pin */
  GPIO_InitStruct.Pin = Bouton_Pin;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2220      	movs	r2, #32
 80006b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2201      	movs	r2, #1
 80006be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton_GPIO_Port, &GPIO_InitStruct);
 80006c0:	193a      	adds	r2, r7, r4
 80006c2:	23a0      	movs	r3, #160	@ 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fee7 	bl	800149c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b009      	add	sp, #36	@ 0x24
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HAL_MspInit+0x44>)
 80006f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <HAL_MspInit+0x44>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HAL_MspInit+0x44>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_MspInit+0x44>)
 8000708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <HAL_MspInit+0x44>)
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	0549      	lsls	r1, r1, #21
 8000710:	430a      	orrs	r2, r1
 8000712:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HAL_MspInit+0x44>)
 8000716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000718:	2380      	movs	r3, #128	@ 0x80
 800071a:	055b      	lsls	r3, r3, #21
 800071c:	4013      	ands	r3, r2
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b091      	sub	sp, #68	@ 0x44
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	232c      	movs	r3, #44	@ 0x2c
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	0018      	movs	r0, r3
 800073e:	2314      	movs	r3, #20
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f001 fdd2 	bl	80022ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	2410      	movs	r4, #16
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	231c      	movs	r3, #28
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f001 fdca 	bl	80022ec <memset>
  if(hadc->Instance==ADC1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <HAL_ADC_MspInit+0xac>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d138      	bne.n	80007d4 <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2220      	movs	r2, #32
 8000766:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076e:	193b      	adds	r3, r7, r4
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fccf 	bl	8002114 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 800077a:	f7ff ffaf 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_ADC_MspInit+0xb0>)
 8000780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_ADC_MspInit+0xb0>)
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	0349      	lsls	r1, r1, #13
 8000788:	430a      	orrs	r2, r1
 800078a:	641a      	str	r2, [r3, #64]	@ 0x40
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_ADC_MspInit+0xb0>)
 800078e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000790:	2380      	movs	r3, #128	@ 0x80
 8000792:	035b      	lsls	r3, r3, #13
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_ADC_MspInit+0xb0>)
 800079c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <HAL_ADC_MspInit+0xb0>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	430a      	orrs	r2, r1
 80007a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_ADC_MspInit+0xb0>)
 80007a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007aa:	2201      	movs	r2, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ICharge_Pin|ILoad_Pin|VBat_Pin|Temp_Pin;
 80007b2:	212c      	movs	r1, #44	@ 0x2c
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	220f      	movs	r2, #15
 80007b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2203      	movs	r2, #3
 80007be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	187a      	adds	r2, r7, r1
 80007c8:	23a0      	movs	r3, #160	@ 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fe64 	bl	800149c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b011      	add	sp, #68	@ 0x44
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	40012400 	.word	0x40012400
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b091      	sub	sp, #68	@ 0x44
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	232c      	movs	r3, #44	@ 0x2c
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f001 fd78 	bl	80022ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	2410      	movs	r4, #16
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	231c      	movs	r3, #28
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f001 fd70 	bl	80022ec <memset>
  if(hi2c->Instance==I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a22      	ldr	r2, [pc, #136]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d13d      	bne.n	8000892 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2202      	movs	r2, #2
 800081a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fc75 	bl	8002114 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f7ff ff55 	bl	80006dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800084a:	212c      	movs	r1, #44	@ 0x2c
 800084c:	187b      	adds	r3, r7, r1
 800084e:	22c0      	movs	r2, #192	@ 0xc0
 8000850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2212      	movs	r2, #18
 8000856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2206      	movs	r2, #6
 8000868:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	187b      	adds	r3, r7, r1
 800086c:	4a0d      	ldr	r2, [pc, #52]	@ (80008a4 <HAL_I2C_MspInit+0xc0>)
 800086e:	0019      	movs	r1, r3
 8000870:	0010      	movs	r0, r2
 8000872:	f000 fe13 	bl	800149c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_I2C_MspInit+0xbc>)
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	0389      	lsls	r1, r1, #14
 8000880:	430a      	orrs	r2, r1
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	039b      	lsls	r3, r3, #14
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b011      	add	sp, #68	@ 0x44
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	50000400 	.word	0x50000400

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f89a 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <SystemInit+0x14>)
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	0512      	lsls	r2, r2, #20
 80008e6:	609a      	str	r2, [r3, #8]
#endif
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f7ff fff0 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008fe:	e003      	b.n	8000908 <LoopCopyDataInit>

08000900 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000902:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000904:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000906:	3104      	adds	r1, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000908:	480a      	ldr	r0, [pc, #40]	@ (8000934 <LoopForever+0xa>)
  ldr r3, =_edata
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <LoopForever+0xe>)
  adds r2, r0, r1
 800090c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800090e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000910:	d3f6      	bcc.n	8000900 <CopyDataInit>
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopForever+0x12>)
  b LoopFillZerobss
 8000914:	e002      	b.n	800091c <LoopFillZerobss>

08000916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  str  r3, [r2]
 8000918:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091a:	3204      	adds	r2, #4

0800091c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <LoopForever+0x16>)
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000920:	d3f9      	bcc.n	8000916 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000922:	f001 fceb 	bl	80022fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fc7b 	bl	8000220 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000930:	080023a4 	.word	0x080023a4
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000940:	200000e4 	.word	0x200000e4

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>

08000946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f80e 	bl	8000974 <HAL_InitTick>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d003      	beq.n	8000964 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e001      	b.n	8000968 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000964:	f7ff fec0 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	230f      	movs	r3, #15
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <HAL_InitTick+0x88>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d02b      	beq.n	80009e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <HAL_InitTick+0x8c>)
 800098e:	681c      	ldr	r4, [r3, #0]
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <HAL_InitTick+0x88>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	0019      	movs	r1, r3
 8000996:	23fa      	movs	r3, #250	@ 0xfa
 8000998:	0098      	lsls	r0, r3, #2
 800099a:	f7ff fbb5 	bl	8000108 <__udivsi3>
 800099e:	0003      	movs	r3, r0
 80009a0:	0019      	movs	r1, r3
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff fbb0 	bl	8000108 <__udivsi3>
 80009a8:	0003      	movs	r3, r0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fd69 	bl	8001482 <HAL_SYSTICK_Config>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d112      	bne.n	80009da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d80a      	bhi.n	80009d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	2301      	movs	r3, #1
 80009be:	425b      	negs	r3, r3
 80009c0:	2200      	movs	r2, #0
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fd48 	bl	8001458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <HAL_InitTick+0x90>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e00d      	b.n	80009ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009d0:	230f      	movs	r3, #15
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	e008      	b.n	80009ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009da:	230f      	movs	r3, #15
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e003      	b.n	80009ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e4:	230f      	movs	r3, #15
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	781b      	ldrb	r3, [r3, #0]
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b005      	add	sp, #20
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	18d2      	adds	r2, r2, r3
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000e0 	.word	0x200000e0

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	@ (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	200000e0 	.word	0x200000e0

08000a40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000a50:	401a      	ands	r2, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	431a      	orrs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	ff3fffff 	.word	0xff3fffff

08000a68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	23c0      	movs	r3, #192	@ 0xc0
 8000a76:	041b      	lsls	r3, r3, #16
 8000a78:	4013      	ands	r3, r2
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	2104      	movs	r1, #4
 8000a96:	400a      	ands	r2, r1
 8000a98:	2107      	movs	r1, #7
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	000a      	movs	r2, r1
 8000a9e:	43d2      	mvns	r2, r2
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	4099      	lsls	r1, r3
 8000aac:	000b      	movs	r3, r1
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b004      	add	sp, #16
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	2104      	movs	r1, #4
 8000ace:	400a      	ands	r2, r1
 8000ad0:	2107      	movs	r1, #7
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	000a      	movs	r2, r1
 8000ad6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2104      	movs	r1, #4
 8000adc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ade:	40da      	lsrs	r2, r3
 8000ae0:	0013      	movs	r3, r2
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	211f      	movs	r1, #31
 8000afe:	400a      	ands	r2, r1
 8000b00:	210f      	movs	r1, #15
 8000b02:	4091      	lsls	r1, r2
 8000b04:	000a      	movs	r2, r1
 8000b06:	43d2      	mvns	r2, r2
 8000b08:	401a      	ands	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0e9b      	lsrs	r3, r3, #26
 8000b0e:	210f      	movs	r1, #15
 8000b10:	4019      	ands	r1, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	201f      	movs	r0, #31
 8000b16:	4003      	ands	r3, r0
 8000b18:	4099      	lsls	r1, r3
 8000b1a:	000b      	movs	r3, r1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	025b      	lsls	r3, r3, #9
 8000b3c:	0a5b      	lsrs	r3, r3, #9
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	0252      	lsls	r2, r2, #9
 8000b5e:	0a52      	lsrs	r2, r2, #9
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	68ba      	ldr	r2, [r7, #8]
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
 8000b90:	4904      	ldr	r1, [pc, #16]	@ (8000ba4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000b92:	400b      	ands	r3, r1
 8000b94:	431a      	orrs	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	7fffff00 	.word	0x7fffff00

08000ba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <LL_ADC_EnableInternalRegulator+0x24>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	0552      	lsls	r2, r2, #21
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	6fffffe8 	.word	0x6fffffe8

08000bd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	055b      	lsls	r3, r3, #21
 8000be0:	401a      	ands	r2, r3
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	055b      	lsls	r3, r3, #21
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d101      	bne.n	8000bee <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d101      	bne.n	8000c10 <LL_ADC_IsEnabled+0x18>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <LL_ADC_IsEnabled+0x1a>
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2204      	movs	r2, #4
 8000c28:	4013      	ands	r3, r2
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d101      	bne.n	8000c32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c44:	231f      	movs	r3, #31
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e17e      	b.n	8000f60 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10a      	bne.n	8000c80 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fd5f 	bl	8000730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2254      	movs	r2, #84	@ 0x54
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffa3 	bl	8000bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d114      	bne.n	8000cb8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff88 	bl	8000ba8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c98:	4bb3      	ldr	r3, [pc, #716]	@ (8000f68 <HAL_ADC_Init+0x32c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	49b3      	ldr	r1, [pc, #716]	@ (8000f6c <HAL_ADC_Init+0x330>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fa32 	bl	8000108 <__udivsi3>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000caa:	e002      	b.n	8000cb2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f9      	bne.n	8000cac <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ff87 	bl	8000bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d10f      	bne.n	8000ce6 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	2210      	movs	r2, #16
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000cde:	231f      	movs	r3, #31
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff ff95 	bl	8000c1a <LL_ADC_REG_IsConversionOngoing>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d000      	beq.n	8000d00 <HAL_ADC_Init+0xc4>
 8000cfe:	e122      	b.n	8000f46 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d000      	beq.n	8000d08 <HAL_ADC_Init+0xcc>
 8000d06:	e11e      	b.n	8000f46 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0c:	4a98      	ldr	r2, [pc, #608]	@ (8000f70 <HAL_ADC_Init+0x334>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2202      	movs	r2, #2
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff6b 	bl	8000bf8 <LL_ADC_IsEnabled>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d000      	beq.n	8000d28 <HAL_ADC_Init+0xec>
 8000d26:	e0ad      	b.n	8000e84 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7e1b      	ldrb	r3, [r3, #24]
 8000d30:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d32:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7e5b      	ldrb	r3, [r3, #25]
 8000d38:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d3a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7e9b      	ldrb	r3, [r3, #26]
 8000d40:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d42:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <HAL_ADC_Init+0x116>
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	e000      	b.n	8000d54 <HAL_ADC_Init+0x118>
 8000d52:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d54:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d5a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da04      	bge.n	8000d6e <HAL_ADC_Init+0x132>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	085b      	lsrs	r3, r3, #1
 8000d6c:	e001      	b.n	8000d72 <HAL_ADC_Init+0x136>
 8000d6e:	2380      	movs	r3, #128	@ 0x80
 8000d70:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000d72:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	212c      	movs	r1, #44	@ 0x2c
 8000d78:	5c5b      	ldrb	r3, [r3, r1]
 8000d7a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d7c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2220      	movs	r2, #32
 8000d88:	5c9b      	ldrb	r3, [r3, r2]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d115      	bne.n	8000dba <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7e9b      	ldrb	r3, [r3, #26]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d105      	bne.n	8000da2 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	2280      	movs	r2, #128	@ 0x80
 8000d9a:	0252      	lsls	r2, r2, #9
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	e00b      	b.n	8000dba <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	2220      	movs	r2, #32
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000db2:	2201      	movs	r2, #1
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00a      	beq.n	8000dd8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dc6:	23e0      	movs	r3, #224	@ 0xe0
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	4a65      	ldr	r2, [pc, #404]	@ (8000f74 <HAL_ADC_Init+0x338>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	0019      	movs	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	0f9b      	lsrs	r3, r3, #30
 8000df4:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	223c      	movs	r2, #60	@ 0x3c
 8000e06:	5c9b      	ldrb	r3, [r3, r2]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d111      	bne.n	8000e30 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	0f9b      	lsrs	r3, r3, #30
 8000e12:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e18:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000e1e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000e24:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	4a50      	ldr	r2, [pc, #320]	@ (8000f78 <HAL_ADC_Init+0x33c>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	23c0      	movs	r3, #192	@ 0xc0
 8000e4c:	061b      	lsls	r3, r3, #24
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d018      	beq.n	8000e84 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d012      	beq.n	8000e84 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e62:	2380      	movs	r3, #128	@ 0x80
 8000e64:	061b      	lsls	r3, r3, #24
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d00c      	beq.n	8000e84 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e6a:	4b44      	ldr	r3, [pc, #272]	@ (8000f7c <HAL_ADC_Init+0x340>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a44      	ldr	r2, [pc, #272]	@ (8000f80 <HAL_ADC_Init+0x344>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	0019      	movs	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	23f0      	movs	r3, #240	@ 0xf0
 8000e7a:	039b      	lsls	r3, r3, #14
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <HAL_ADC_Init+0x340>)
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f7ff fdf7 	bl	8000a82 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e9c:	4939      	ldr	r1, [pc, #228]	@ (8000f84 <HAL_ADC_Init+0x348>)
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	f7ff fdef 	bl	8000a82 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d109      	bne.n	8000ec0 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4249      	negs	r1, r1
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ebe:	e018      	b.n	8000ef2 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	039b      	lsls	r3, r3, #14
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d112      	bne.n	8000ef2 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	221c      	movs	r2, #28
 8000edc:	4013      	ands	r3, r2
 8000ede:	2210      	movs	r2, #16
 8000ee0:	4252      	negs	r2, r2
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fddf 	bl	8000abc <LL_ADC_GetSamplingTimeCommonChannels>
 8000efe:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d10b      	bne.n	8000f20 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	2203      	movs	r2, #3
 8000f14:	4393      	bics	r3, r2
 8000f16:	2201      	movs	r2, #1
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f1e:	e01c      	b.n	8000f5a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	2212      	movs	r2, #18
 8000f26:	4393      	bics	r3, r2
 8000f28:	2210      	movs	r2, #16
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f34:	2201      	movs	r2, #1
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000f3c:	231f      	movs	r3, #31
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f44:	e009      	b.n	8000f5a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000f52:	231f      	movs	r3, #31
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f5a:	231f      	movs	r3, #31
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b008      	add	sp, #32
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	00030d40 	.word	0x00030d40
 8000f70:	fffffefd 	.word	0xfffffefd
 8000f74:	ffde0201 	.word	0xffde0201
 8000f78:	1ffffc02 	.word	0x1ffffc02
 8000f7c:	40012708 	.word	0x40012708
 8000f80:	ffc3ffff 	.word	0xffc3ffff
 8000f84:	7fffff04 	.word	0x7fffff04

08000f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f92:	2317      	movs	r3, #23
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2254      	movs	r2, #84	@ 0x54
 8000fa2:	5c9b      	ldrb	r3, [r3, r2]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x24>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e1be      	b.n	800132a <HAL_ADC_ConfigChannel+0x3a2>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2254      	movs	r2, #84	@ 0x54
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff fe2e 	bl	8000c1a <LL_ADC_REG_IsConversionOngoing>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d000      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x3c>
 8000fc2:	e1a1      	b.n	8001308 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d100      	bne.n	8000fce <HAL_ADC_ConfigChannel+0x46>
 8000fcc:	e152      	b.n	8001274 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	2380      	movs	r3, #128	@ 0x80
 8000fd4:	061b      	lsls	r3, r3, #24
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d004      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000fde:	4ac2      	ldr	r2, [pc, #776]	@ (80012e8 <HAL_ADC_ConfigChannel+0x360>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d108      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	0019      	movs	r1, r3
 8000fee:	0010      	movs	r0, r2
 8000ff0:	f7ff fd9b 	bl	8000b2a <LL_ADC_REG_SetSequencerChAdd>
 8000ff4:	e0ed      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	211f      	movs	r1, #31
 8001000:	400b      	ands	r3, r1
 8001002:	210f      	movs	r1, #15
 8001004:	4099      	lsls	r1, r3
 8001006:	000b      	movs	r3, r1
 8001008:	43db      	mvns	r3, r3
 800100a:	4013      	ands	r3, r2
 800100c:	0019      	movs	r1, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	025b      	lsls	r3, r3, #9
 8001014:	0a5b      	lsrs	r3, r3, #9
 8001016:	d105      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x9c>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0e9b      	lsrs	r3, r3, #26
 800101e:	221f      	movs	r2, #31
 8001020:	4013      	ands	r3, r2
 8001022:	e0bc      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2201      	movs	r2, #1
 800102a:	4013      	ands	r3, r2
 800102c:	d000      	beq.n	8001030 <HAL_ADC_ConfigChannel+0xa8>
 800102e:	e0b5      	b.n	800119c <HAL_ADC_ConfigChannel+0x214>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2202      	movs	r2, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d000      	beq.n	800103c <HAL_ADC_ConfigChannel+0xb4>
 800103a:	e0ad      	b.n	8001198 <HAL_ADC_ConfigChannel+0x210>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2204      	movs	r2, #4
 8001042:	4013      	ands	r3, r2
 8001044:	d000      	beq.n	8001048 <HAL_ADC_ConfigChannel+0xc0>
 8001046:	e0a5      	b.n	8001194 <HAL_ADC_ConfigChannel+0x20c>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4013      	ands	r3, r2
 8001050:	d000      	beq.n	8001054 <HAL_ADC_ConfigChannel+0xcc>
 8001052:	e09d      	b.n	8001190 <HAL_ADC_ConfigChannel+0x208>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2210      	movs	r2, #16
 800105a:	4013      	ands	r3, r2
 800105c:	d000      	beq.n	8001060 <HAL_ADC_ConfigChannel+0xd8>
 800105e:	e095      	b.n	800118c <HAL_ADC_ConfigChannel+0x204>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2220      	movs	r2, #32
 8001066:	4013      	ands	r3, r2
 8001068:	d000      	beq.n	800106c <HAL_ADC_ConfigChannel+0xe4>
 800106a:	e08d      	b.n	8001188 <HAL_ADC_ConfigChannel+0x200>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4013      	ands	r3, r2
 8001074:	d000      	beq.n	8001078 <HAL_ADC_ConfigChannel+0xf0>
 8001076:	e085      	b.n	8001184 <HAL_ADC_ConfigChannel+0x1fc>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2280      	movs	r2, #128	@ 0x80
 800107e:	4013      	ands	r3, r2
 8001080:	d000      	beq.n	8001084 <HAL_ADC_ConfigChannel+0xfc>
 8001082:	e07d      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1f8>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4013      	ands	r3, r2
 800108e:	d000      	beq.n	8001092 <HAL_ADC_ConfigChannel+0x10a>
 8001090:	e074      	b.n	800117c <HAL_ADC_ConfigChannel+0x1f4>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d000      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x118>
 800109e:	e06b      	b.n	8001178 <HAL_ADC_ConfigChannel+0x1f0>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4013      	ands	r3, r2
 80010aa:	d000      	beq.n	80010ae <HAL_ADC_ConfigChannel+0x126>
 80010ac:	e062      	b.n	8001174 <HAL_ADC_ConfigChannel+0x1ec>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4013      	ands	r3, r2
 80010b8:	d000      	beq.n	80010bc <HAL_ADC_ConfigChannel+0x134>
 80010ba:	e059      	b.n	8001170 <HAL_ADC_ConfigChannel+0x1e8>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	015b      	lsls	r3, r3, #5
 80010c4:	4013      	ands	r3, r2
 80010c6:	d151      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1e4>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	019b      	lsls	r3, r3, #6
 80010d0:	4013      	ands	r3, r2
 80010d2:	d149      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1e0>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	01db      	lsls	r3, r3, #7
 80010dc:	4013      	ands	r3, r2
 80010de:	d141      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1dc>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4013      	ands	r3, r2
 80010ea:	d139      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x1d8>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	4013      	ands	r3, r2
 80010f6:	d131      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1d4>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	029b      	lsls	r3, r3, #10
 8001100:	4013      	ands	r3, r2
 8001102:	d129      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1d0>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	02db      	lsls	r3, r3, #11
 800110c:	4013      	ands	r3, r2
 800110e:	d121      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1cc>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	031b      	lsls	r3, r3, #12
 8001118:	4013      	ands	r3, r2
 800111a:	d119      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x1c8>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	035b      	lsls	r3, r3, #13
 8001124:	4013      	ands	r3, r2
 8001126:	d111      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1c4>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	039b      	lsls	r3, r3, #14
 8001130:	4013      	ands	r3, r2
 8001132:	d109      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1c0>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	03db      	lsls	r3, r3, #15
 800113c:	4013      	ands	r3, r2
 800113e:	d001      	beq.n	8001144 <HAL_ADC_ConfigChannel+0x1bc>
 8001140:	2316      	movs	r3, #22
 8001142:	e02c      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001144:	2300      	movs	r3, #0
 8001146:	e02a      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001148:	2315      	movs	r3, #21
 800114a:	e028      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 800114c:	2314      	movs	r3, #20
 800114e:	e026      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001150:	2313      	movs	r3, #19
 8001152:	e024      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001154:	2312      	movs	r3, #18
 8001156:	e022      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001158:	2311      	movs	r3, #17
 800115a:	e020      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 800115c:	2310      	movs	r3, #16
 800115e:	e01e      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001160:	230f      	movs	r3, #15
 8001162:	e01c      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001164:	230e      	movs	r3, #14
 8001166:	e01a      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001168:	230d      	movs	r3, #13
 800116a:	e018      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 800116c:	230c      	movs	r3, #12
 800116e:	e016      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001170:	230b      	movs	r3, #11
 8001172:	e014      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001174:	230a      	movs	r3, #10
 8001176:	e012      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001178:	2309      	movs	r3, #9
 800117a:	e010      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 800117c:	2308      	movs	r3, #8
 800117e:	e00e      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001180:	2307      	movs	r3, #7
 8001182:	e00c      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001184:	2306      	movs	r3, #6
 8001186:	e00a      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001188:	2305      	movs	r3, #5
 800118a:	e008      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 800118c:	2304      	movs	r3, #4
 800118e:	e006      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001190:	2303      	movs	r3, #3
 8001192:	e004      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001194:	2302      	movs	r3, #2
 8001196:	e002      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <HAL_ADC_ConfigChannel+0x216>
 800119c:	2300      	movs	r3, #0
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	6852      	ldr	r2, [r2, #4]
 80011a2:	201f      	movs	r0, #31
 80011a4:	4002      	ands	r2, r0
 80011a6:	4093      	lsls	r3, r2
 80011a8:	000a      	movs	r2, r1
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d808      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	001a      	movs	r2, r3
 80011ce:	f7ff fc8c 	bl	8000aea <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	6819      	ldr	r1, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	001a      	movs	r2, r3
 80011e0:	f7ff fcc6 	bl	8000b70 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db00      	blt.n	80011ee <HAL_ADC_ConfigChannel+0x266>
 80011ec:	e096      	b.n	800131c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <HAL_ADC_ConfigChannel+0x364>)
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fc39 	bl	8000a68 <LL_ADC_GetCommonPathInternalCh>
 80011f6:	0003      	movs	r3, r0
 80011f8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3c      	ldr	r2, [pc, #240]	@ (80012f0 <HAL_ADC_ConfigChannel+0x368>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d123      	bne.n	800124c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800120c:	d11e      	bne.n	800124c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2280      	movs	r2, #128	@ 0x80
 8001212:	0412      	lsls	r2, r2, #16
 8001214:	4313      	orrs	r3, r2
 8001216:	4a35      	ldr	r2, [pc, #212]	@ (80012ec <HAL_ADC_ConfigChannel+0x364>)
 8001218:	0019      	movs	r1, r3
 800121a:	0010      	movs	r0, r2
 800121c:	f7ff fc10 	bl	8000a40 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001220:	4b34      	ldr	r3, [pc, #208]	@ (80012f4 <HAL_ADC_ConfigChannel+0x36c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4934      	ldr	r1, [pc, #208]	@ (80012f8 <HAL_ADC_ConfigChannel+0x370>)
 8001226:	0018      	movs	r0, r3
 8001228:	f7fe ff6e 	bl	8000108 <__udivsi3>
 800122c:	0003      	movs	r3, r0
 800122e:	001a      	movs	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	189b      	adds	r3, r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	3301      	adds	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800123c:	e002      	b.n	8001244 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3b01      	subs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f9      	bne.n	800123e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800124a:	e067      	b.n	800131c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2a      	ldr	r2, [pc, #168]	@ (80012fc <HAL_ADC_ConfigChannel+0x374>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d162      	bne.n	800131c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	03db      	lsls	r3, r3, #15
 800125c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800125e:	d15d      	bne.n	800131c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2280      	movs	r2, #128	@ 0x80
 8001264:	03d2      	lsls	r2, r2, #15
 8001266:	4313      	orrs	r3, r2
 8001268:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <HAL_ADC_ConfigChannel+0x364>)
 800126a:	0019      	movs	r1, r3
 800126c:	0010      	movs	r0, r2
 800126e:	f7ff fbe7 	bl	8000a40 <LL_ADC_SetCommonPathInternalCh>
 8001272:	e053      	b.n	800131c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	061b      	lsls	r3, r3, #24
 800127c:	429a      	cmp	r2, r3
 800127e:	d004      	beq.n	800128a <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001284:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <HAL_ADC_ConfigChannel+0x360>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d107      	bne.n	800129a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	0019      	movs	r1, r3
 8001294:	0010      	movs	r0, r2
 8001296:	f7ff fc59 	bl	8000b4c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da3c      	bge.n	800131c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_ADC_ConfigChannel+0x364>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fbdf 	bl	8000a68 <LL_ADC_GetCommonPathInternalCh>
 80012aa:	0003      	movs	r3, r0
 80012ac:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <HAL_ADC_ConfigChannel+0x368>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d108      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_ADC_ConfigChannel+0x378>)
 80012bc:	4013      	ands	r3, r2
 80012be:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_ADC_ConfigChannel+0x364>)
 80012c0:	0019      	movs	r1, r3
 80012c2:	0010      	movs	r0, r2
 80012c4:	f7ff fbbc 	bl	8000a40 <LL_ADC_SetCommonPathInternalCh>
 80012c8:	e028      	b.n	800131c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <HAL_ADC_ConfigChannel+0x374>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d123      	bne.n	800131c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_ADC_ConfigChannel+0x37c>)
 80012d8:	4013      	ands	r3, r2
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_ADC_ConfigChannel+0x364>)
 80012dc:	0019      	movs	r1, r3
 80012de:	0010      	movs	r0, r2
 80012e0:	f7ff fbae 	bl	8000a40 <LL_ADC_SetCommonPathInternalCh>
 80012e4:	e01a      	b.n	800131c <HAL_ADC_ConfigChannel+0x394>
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	80000004 	.word	0x80000004
 80012ec:	40012708 	.word	0x40012708
 80012f0:	a4000200 	.word	0xa4000200
 80012f4:	20000000 	.word	0x20000000
 80012f8:	00030d40 	.word	0x00030d40
 80012fc:	a8000400 	.word	0xa8000400
 8001300:	ff7fffff 	.word	0xff7fffff
 8001304:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130c:	2220      	movs	r2, #32
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001314:	2317      	movs	r3, #23
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2254      	movs	r2, #84	@ 0x54
 8001320:	2100      	movs	r1, #0
 8001322:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001324:	2317      	movs	r3, #23
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	781b      	ldrb	r3, [r3, #0]
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b006      	add	sp, #24
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	0002      	movs	r2, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b7f      	cmp	r3, #127	@ 0x7f
 8001348:	d828      	bhi.n	800139c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134a:	4a2f      	ldr	r2, [pc, #188]	@ (8001408 <__NVIC_SetPriority+0xd4>)
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	33c0      	adds	r3, #192	@ 0xc0
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	589b      	ldr	r3, [r3, r2]
 800135a:	1dfa      	adds	r2, r7, #7
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	0011      	movs	r1, r2
 8001360:	2203      	movs	r2, #3
 8001362:	400a      	ands	r2, r1
 8001364:	00d2      	lsls	r2, r2, #3
 8001366:	21ff      	movs	r1, #255	@ 0xff
 8001368:	4091      	lsls	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	43d2      	mvns	r2, r2
 800136e:	401a      	ands	r2, r3
 8001370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	22ff      	movs	r2, #255	@ 0xff
 8001378:	401a      	ands	r2, r3
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	0018      	movs	r0, r3
 8001380:	2303      	movs	r3, #3
 8001382:	4003      	ands	r3, r0
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001388:	481f      	ldr	r0, [pc, #124]	@ (8001408 <__NVIC_SetPriority+0xd4>)
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	430a      	orrs	r2, r1
 8001394:	33c0      	adds	r3, #192	@ 0xc0
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800139a:	e031      	b.n	8001400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139c:	4a1b      	ldr	r2, [pc, #108]	@ (800140c <__NVIC_SetPriority+0xd8>)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	0019      	movs	r1, r3
 80013a4:	230f      	movs	r3, #15
 80013a6:	400b      	ands	r3, r1
 80013a8:	3b08      	subs	r3, #8
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3306      	adds	r3, #6
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	18d3      	adds	r3, r2, r3
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	0011      	movs	r1, r2
 80013bc:	2203      	movs	r2, #3
 80013be:	400a      	ands	r2, r1
 80013c0:	00d2      	lsls	r2, r2, #3
 80013c2:	21ff      	movs	r1, #255	@ 0xff
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	43d2      	mvns	r2, r2
 80013ca:	401a      	ands	r2, r3
 80013cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	22ff      	movs	r2, #255	@ 0xff
 80013d4:	401a      	ands	r2, r3
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	2303      	movs	r3, #3
 80013de:	4003      	ands	r3, r0
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e4:	4809      	ldr	r0, [pc, #36]	@ (800140c <__NVIC_SetPriority+0xd8>)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	001c      	movs	r4, r3
 80013ec:	230f      	movs	r3, #15
 80013ee:	4023      	ands	r3, r4
 80013f0:	3b08      	subs	r3, #8
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	430a      	orrs	r2, r1
 80013f6:	3306      	adds	r3, #6
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	18c3      	adds	r3, r0, r3
 80013fc:	3304      	adds	r3, #4
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b003      	add	sp, #12
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	045b      	lsls	r3, r3, #17
 8001420:	429a      	cmp	r2, r3
 8001422:	d301      	bcc.n	8001428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001424:	2301      	movs	r3, #1
 8001426:	e010      	b.n	800144a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <SysTick_Config+0x44>)
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	3a01      	subs	r2, #1
 800142e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001430:	2301      	movs	r3, #1
 8001432:	425b      	negs	r3, r3
 8001434:	2103      	movs	r1, #3
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff ff7c 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <SysTick_Config+0x44>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <SysTick_Config+0x44>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	210f      	movs	r1, #15
 8001464:	187b      	adds	r3, r7, r1
 8001466:	1c02      	adds	r2, r0, #0
 8001468:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	187b      	adds	r3, r7, r1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b004      	add	sp, #16
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ffbf 	bl	8001410 <SysTick_Config>
 8001492:	0003      	movs	r3, r0
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014aa:	e14d      	b.n	8001748 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4091      	lsls	r1, r2
 80014b6:	000a      	movs	r2, r1
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d100      	bne.n	80014c4 <HAL_GPIO_Init+0x28>
 80014c2:	e13e      	b.n	8001742 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x38>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b12      	cmp	r3, #18
 80014d2:	d125      	bne.n	8001520 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	58d3      	ldr	r3, [r2, r3]
 80014e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2207      	movs	r2, #7
 80014e6:	4013      	ands	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	220f      	movs	r2, #15
 80014ec:	409a      	lsls	r2, r3
 80014ee:	0013      	movs	r3, r2
 80014f0:	43da      	mvns	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	220f      	movs	r2, #15
 80014fe:	401a      	ands	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2107      	movs	r1, #7
 8001504:	400b      	ands	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	409a      	lsls	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	4313      	orrs	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	6979      	ldr	r1, [r7, #20]
 800151e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	409a      	lsls	r2, r3
 800152e:	0013      	movs	r3, r2
 8001530:	43da      	mvns	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2203      	movs	r2, #3
 800153e:	401a      	ands	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	409a      	lsls	r2, r3
 8001546:	0013      	movs	r3, r2
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4313      	orrs	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d00b      	beq.n	8001574 <HAL_GPIO_Init+0xd8>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001568:	2b11      	cmp	r3, #17
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b12      	cmp	r3, #18
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	43da      	mvns	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4013      	ands	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4313      	orrs	r3, r2
 800159c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4013      	ands	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	2201      	movs	r2, #1
 80015c2:	401a      	ands	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	43da      	mvns	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4013      	ands	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	055b      	lsls	r3, r3, #21
 8001616:	4013      	ands	r3, r2
 8001618:	d100      	bne.n	800161c <HAL_GPIO_Init+0x180>
 800161a:	e092      	b.n	8001742 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800161c:	4a50      	ldr	r2, [pc, #320]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3318      	adds	r3, #24
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	589b      	ldr	r3, [r3, r2]
 8001628:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2203      	movs	r2, #3
 800162e:	4013      	ands	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	220f      	movs	r2, #15
 8001634:	409a      	lsls	r2, r3
 8001636:	0013      	movs	r3, r2
 8001638:	43da      	mvns	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	23a0      	movs	r3, #160	@ 0xa0
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	429a      	cmp	r2, r3
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0x1d6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a45      	ldr	r2, [pc, #276]	@ (8001764 <HAL_GPIO_Init+0x2c8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x1d2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a44      	ldr	r2, [pc, #272]	@ (8001768 <HAL_GPIO_Init+0x2cc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x1ce>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a43      	ldr	r2, [pc, #268]	@ (800176c <HAL_GPIO_Init+0x2d0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x1ca>
 8001662:	2305      	movs	r3, #5
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x1d8>
 8001666:	2306      	movs	r3, #6
 8001668:	e004      	b.n	8001674 <HAL_GPIO_Init+0x1d8>
 800166a:	2302      	movs	r3, #2
 800166c:	e002      	b.n	8001674 <HAL_GPIO_Init+0x1d8>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x1d8>
 8001672:	2300      	movs	r3, #0
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	2103      	movs	r1, #3
 8001678:	400a      	ands	r2, r1
 800167a:	00d2      	lsls	r2, r2, #3
 800167c:	4093      	lsls	r3, r2
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001684:	4936      	ldr	r1, [pc, #216]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3318      	adds	r3, #24
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001692:	4a33      	ldr	r2, [pc, #204]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	58d3      	ldr	r3, [r2, r3]
 8001698:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43da      	mvns	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	4013      	ands	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	4013      	ands	r3, r2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80016b8:	4929      	ldr	r1, [pc, #164]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 80016ba:	2280      	movs	r2, #128	@ 0x80
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80016c0:	4a27      	ldr	r2, [pc, #156]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 80016c2:	2384      	movs	r3, #132	@ 0x84
 80016c4:	58d3      	ldr	r3, [r2, r3]
 80016c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43da      	mvns	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4013      	ands	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	4013      	ands	r3, r2
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80016e6:	491e      	ldr	r1, [pc, #120]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 80016e8:	2284      	movs	r2, #132	@ 0x84
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43da      	mvns	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	4013      	ands	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	035b      	lsls	r3, r3, #13
 8001706:	4013      	ands	r3, r2
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43da      	mvns	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4013      	ands	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	039b      	lsls	r3, r3, #14
 8001730:	4013      	ands	r3, r2
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	3301      	adds	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	40da      	lsrs	r2, r3
 8001750:	1e13      	subs	r3, r2, #0
 8001752:	d000      	beq.n	8001756 <HAL_GPIO_Init+0x2ba>
 8001754:	e6aa      	b.n	80014ac <HAL_GPIO_Init+0x10>
  }
}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b006      	add	sp, #24
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021800 	.word	0x40021800
 8001764:	50000400 	.word	0x50000400
 8001768:	50000800 	.word	0x50000800
 800176c:	50001400 	.word	0x50001400

08001770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	000a      	movs	r2, r1
 800177a:	1cbb      	adds	r3, r7, #2
 800177c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	1cba      	adds	r2, r7, #2
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	4013      	ands	r3, r2
 8001788:	d004      	beq.n	8001794 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800178a:	230f      	movs	r3, #15
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e003      	b.n	800179c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001794:	230f      	movs	r3, #15
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800179c:	230f      	movs	r3, #15
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	781b      	ldrb	r3, [r3, #0]
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b004      	add	sp, #16
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	0008      	movs	r0, r1
 80017b4:	0011      	movs	r1, r2
 80017b6:	1cbb      	adds	r3, r7, #2
 80017b8:	1c02      	adds	r2, r0, #0
 80017ba:	801a      	strh	r2, [r3, #0]
 80017bc:	1c7b      	adds	r3, r7, #1
 80017be:	1c0a      	adds	r2, r1, #0
 80017c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c2:	1c7b      	adds	r3, r7, #1
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d004      	beq.n	80017d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	1cbb      	adds	r3, r7, #2
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d2:	e003      	b.n	80017dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d4:	1cbb      	adds	r3, r7, #2
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017dc:	46c0      	nop			@ (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	000a      	movs	r2, r1
 80017ee:	1cbb      	adds	r3, r7, #2
 80017f0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f8:	1cbb      	adds	r3, r7, #2
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	1cb9      	adds	r1, r7, #2
 8001808:	8809      	ldrh	r1, [r1, #0]
 800180a:	400b      	ands	r3, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e08f      	b.n	800194e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2241      	movs	r2, #65	@ 0x41
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2240      	movs	r2, #64	@ 0x40
 800183e:	2100      	movs	r1, #0
 8001840:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	0018      	movs	r0, r3
 8001846:	f7fe ffcd 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2241      	movs	r2, #65	@ 0x41
 800184e:	2124      	movs	r1, #36	@ 0x24
 8001850:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	438a      	bics	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	493b      	ldr	r1, [pc, #236]	@ (8001958 <HAL_I2C_Init+0x13c>)
 800186c:	400a      	ands	r2, r1
 800186e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4938      	ldr	r1, [pc, #224]	@ (800195c <HAL_I2C_Init+0x140>)
 800187c:	400a      	ands	r2, r1
 800187e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	0209      	lsls	r1, r1, #8
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e007      	b.n	80018aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2184      	movs	r1, #132	@ 0x84
 80018a4:	0209      	lsls	r1, r1, #8
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d109      	bne.n	80018c6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	0109      	lsls	r1, r1, #4
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	e007      	b.n	80018d6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4923      	ldr	r1, [pc, #140]	@ (8001960 <HAL_I2C_Init+0x144>)
 80018d2:	400a      	ands	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4920      	ldr	r1, [pc, #128]	@ (8001964 <HAL_I2C_Init+0x148>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	491a      	ldr	r1, [pc, #104]	@ (800195c <HAL_I2C_Init+0x140>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	431a      	orrs	r2, r3
 8001900:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69d9      	ldr	r1, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2101      	movs	r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2241      	movs	r2, #65	@ 0x41
 800193a:	2120      	movs	r1, #32
 800193c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2242      	movs	r2, #66	@ 0x42
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	f0ffffff 	.word	0xf0ffffff
 800195c:	ffff7fff 	.word	0xffff7fff
 8001960:	fffff7ff 	.word	0xfffff7ff
 8001964:	02008000 	.word	0x02008000

08001968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2241      	movs	r2, #65	@ 0x41
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b20      	cmp	r3, #32
 800197c:	d138      	bne.n	80019f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2240      	movs	r2, #64	@ 0x40
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001988:	2302      	movs	r3, #2
 800198a:	e032      	b.n	80019f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2240      	movs	r2, #64	@ 0x40
 8001990:	2101      	movs	r1, #1
 8001992:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2241      	movs	r2, #65	@ 0x41
 8001998:	2124      	movs	r1, #36	@ 0x24
 800199a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	438a      	bics	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4911      	ldr	r1, [pc, #68]	@ (80019fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2241      	movs	r2, #65	@ 0x41
 80019e0:	2120      	movs	r1, #32
 80019e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2240      	movs	r2, #64	@ 0x40
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	ffffefff 	.word	0xffffefff

08001a00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2241      	movs	r2, #65	@ 0x41
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d139      	bne.n	8001a8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2240      	movs	r2, #64	@ 0x40
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e033      	b.n	8001a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	@ 0x40
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2241      	movs	r2, #65	@ 0x41
 8001a30:	2124      	movs	r1, #36	@ 0x24
 8001a32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2241      	movs	r2, #65	@ 0x41
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2240      	movs	r2, #64	@ 0x40
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
  }
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	fffff0ff 	.word	0xfffff0ff

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1d0      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d100      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1e>
 8001ab4:	e069      	b.n	8001b8a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab6:	4bc8      	ldr	r3, [pc, #800]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2238      	movs	r2, #56	@ 0x38
 8001abc:	4013      	ands	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d15d      	bne.n	8001b8a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1bc      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	2380      	movs	r3, #128	@ 0x80
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_OscConfig+0x56>
 8001ade:	4bbe      	ldr	r3, [pc, #760]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4bbd      	ldr	r3, [pc, #756]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e020      	b.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	23a0      	movs	r3, #160	@ 0xa0
 8001af4:	02db      	lsls	r3, r3, #11
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d10e      	bne.n	8001b18 <HAL_RCC_OscConfig+0x80>
 8001afa:	4bb7      	ldr	r3, [pc, #732]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4bb6      	ldr	r3, [pc, #728]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	02c9      	lsls	r1, r1, #11
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	4bb3      	ldr	r3, [pc, #716]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4bb2      	ldr	r3, [pc, #712]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	0249      	lsls	r1, r1, #9
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b18:	4baf      	ldr	r3, [pc, #700]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4bae      	ldr	r3, [pc, #696]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b1e:	49af      	ldr	r1, [pc, #700]	@ (8001ddc <HAL_RCC_OscConfig+0x344>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4bac      	ldr	r3, [pc, #688]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4bab      	ldr	r3, [pc, #684]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b2a:	49ad      	ldr	r1, [pc, #692]	@ (8001de0 <HAL_RCC_OscConfig+0x348>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7fe ff78 	bl	8000a2c <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b42:	f7fe ff73 	bl	8000a2c <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	@ 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e17b      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b54:	4ba0      	ldr	r3, [pc, #640]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0xaa>
 8001b60:	e013      	b.n	8001b8a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7fe ff63 	bl	8000a2c <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b6c:	f7fe ff5e 	bl	8000a2c <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e166      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	4b96      	ldr	r3, [pc, #600]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	4013      	ands	r3, r2
 8001b92:	d100      	bne.n	8001b96 <HAL_RCC_OscConfig+0xfe>
 8001b94:	e086      	b.n	8001ca4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b96:	4b90      	ldr	r3, [pc, #576]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2238      	movs	r2, #56	@ 0x38
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d12f      	bne.n	8001c06 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e14c      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b89      	ldr	r3, [pc, #548]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a8b      	ldr	r2, [pc, #556]	@ (8001de4 <HAL_RCC_OscConfig+0x34c>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	021a      	lsls	r2, r3, #8
 8001bc2:	4b85      	ldr	r3, [pc, #532]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d112      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bce:	4b82      	ldr	r3, [pc, #520]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a85      	ldr	r2, [pc, #532]	@ (8001de8 <HAL_RCC_OscConfig+0x350>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001be2:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0adb      	lsrs	r3, r3, #11
 8001be8:	2207      	movs	r2, #7
 8001bea:	4013      	ands	r3, r2
 8001bec:	4a7f      	ldr	r2, [pc, #508]	@ (8001dec <HAL_RCC_OscConfig+0x354>)
 8001bee:	40da      	lsrs	r2, r3
 8001bf0:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <HAL_RCC_OscConfig+0x358>)
 8001bf2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8001df4 <HAL_RCC_OscConfig+0x35c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7fe febb 	bl	8000974 <HAL_InitTick>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d050      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e122      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d030      	beq.n	8001c70 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c0e:	4b72      	ldr	r3, [pc, #456]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a75      	ldr	r2, [pc, #468]	@ (8001de8 <HAL_RCC_OscConfig+0x350>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001c22:	4b6d      	ldr	r3, [pc, #436]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c28:	2180      	movs	r1, #128	@ 0x80
 8001c2a:	0049      	lsls	r1, r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe fefc 	bl	8000a2c <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c3a:	f7fe fef7 	bl	8000a2c <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0ff      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4c:	4b62      	ldr	r3, [pc, #392]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a61      	ldr	r2, [pc, #388]	@ (8001de4 <HAL_RCC_OscConfig+0x34c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	021a      	lsls	r2, r3, #8
 8001c68:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e019      	b.n	8001ca4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001c70:	4b59      	ldr	r3, [pc, #356]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c76:	4960      	ldr	r1, [pc, #384]	@ (8001df8 <HAL_RCC_OscConfig+0x360>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7fe fed6 	bl	8000a2c <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c86:	f7fe fed1 	bl	8000a2c <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0d9      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c98:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2208      	movs	r2, #8
 8001caa:	4013      	ands	r3, r2
 8001cac:	d042      	beq.n	8001d34 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001cae:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2238      	movs	r2, #56	@ 0x38
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b18      	cmp	r3, #24
 8001cb8:	d105      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d138      	bne.n	8001d34 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0c2      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cce:	4b42      	ldr	r3, [pc, #264]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001cd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cd2:	4b41      	ldr	r3, [pc, #260]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7fe fea7 	bl	8000a2c <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ce4:	f7fe fea2 	bl	8000a2c <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0aa      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001cf6:	4b38      	ldr	r3, [pc, #224]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d0f1      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x24c>
 8001d00:	e018      	b.n	8001d34 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d02:	4b35      	ldr	r3, [pc, #212]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d06:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7fe fe8d 	bl	8000a2c <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001d18:	f7fe fe88 	bl	8000a2c <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e090      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d1f1      	bne.n	8001d18 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d100      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2a8>
 8001d3e:	e084      	b.n	8001e4a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d40:	230f      	movs	r3, #15
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2238      	movs	r2, #56	@ 0x38
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d000      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2c6>
 8001d5c:	e075      	b.n	8001e4a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e074      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d106      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2e0>
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x31a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x302>
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d86:	2104      	movs	r1, #4
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x31a>
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001d9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	438a      	bics	r2, r1
 8001da4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001da8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001dac:	2104      	movs	r1, #4
 8001dae:	438a      	bics	r2, r1
 8001db0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d028      	beq.n	8001e0c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe fe37 	bl	8000a2c <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7fe fe32 	bl	8000a2c <HAL_GetTick>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <HAL_RCC_OscConfig+0x364>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d915      	bls.n	8001e00 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e039      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	fffeffff 	.word	0xfffeffff
 8001de0:	fffbffff 	.word	0xfffbffff
 8001de4:	ffff80ff 	.word	0xffff80ff
 8001de8:	ffffc7ff 	.word	0xffffc7ff
 8001dec:	02dc6c00 	.word	0x02dc6c00
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004
 8001df8:	fffffeff 	.word	0xfffffeff
 8001dfc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_RCC_OscConfig+0x3bc>)
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d0dc      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x32c>
 8001e0a:	e013      	b.n	8001e34 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe fe0e 	bl	8000a2c <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001e14:	e009      	b.n	8001e2a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe fe09 	bl	8000a2c <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <HAL_RCC_OscConfig+0x3c0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e010      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_RCC_OscConfig+0x3bc>)
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e34:	230f      	movs	r3, #15
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <HAL_RCC_OscConfig+0x3bc>)
 8001e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e42:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <HAL_RCC_OscConfig+0x3bc>)
 8001e44:	4905      	ldr	r1, [pc, #20]	@ (8001e5c <HAL_RCC_OscConfig+0x3c4>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b006      	add	sp, #24
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	00001388 	.word	0x00001388
 8001e5c:	efffffff 	.word	0xefffffff

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0e9      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2207      	movs	r2, #7
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d91e      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b73      	ldr	r3, [pc, #460]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2207      	movs	r2, #7
 8001e88:	4393      	bics	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	4b70      	ldr	r3, [pc, #448]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fdca 	bl	8000a2c <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9e:	f7fe fdc5 	bl	8000a2c <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8002054 <HAL_RCC_ClockConfig+0x1f4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0ca      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eb2:	4b67      	ldr	r3, [pc, #412]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	4013      	ands	r3, r2
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d017      	beq.n	8001efa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d008      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ed4:	4b60      	ldr	r3, [pc, #384]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a60      	ldr	r2, [pc, #384]	@ (800205c <HAL_RCC_ClockConfig+0x1fc>)
 8001eda:	401a      	ands	r2, r3
 8001edc:	4b5e      	ldr	r3, [pc, #376]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	21b0      	movs	r1, #176	@ 0xb0
 8001ee0:	0109      	lsls	r1, r1, #4
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	4a5d      	ldr	r2, [pc, #372]	@ (8002060 <HAL_RCC_ClockConfig+0x200>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4b58      	ldr	r3, [pc, #352]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d055      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001f04:	4b54      	ldr	r3, [pc, #336]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	221c      	movs	r2, #28
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b51      	ldr	r3, [pc, #324]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f20:	4b4d      	ldr	r3, [pc, #308]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	029b      	lsls	r3, r3, #10
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d11f      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e08b      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f38:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4013      	ands	r3, r2
 8001f42:	d113      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e07f      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001f50:	4b41      	ldr	r3, [pc, #260]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d108      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e074      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e06d      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2207      	movs	r2, #7
 8001f72:	4393      	bics	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f80:	f7fe fd54 	bl	8000a2c <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8a:	f7fe fd4f 	bl	8000a2c <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4a2f      	ldr	r2, [pc, #188]	@ (8002054 <HAL_RCC_ClockConfig+0x1f4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e054      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2238      	movs	r2, #56	@ 0x38
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1ec      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d21e      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fd2c 	bl	8000a2c <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7fe fd27 	bl	8000a2c <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <HAL_RCC_ClockConfig+0x1f4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e02c      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1ee      	bne.n	8001fda <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2204      	movs	r2, #4
 8002002:	4013      	ands	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <HAL_RCC_ClockConfig+0x204>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800201a:	f000 f82b 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 800201e:	0001      	movs	r1, r0
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8002022:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	220f      	movs	r2, #15
 8002028:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_RCC_ClockConfig+0x208>)
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002030:	221f      	movs	r2, #31
 8002032:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002034:	000a      	movs	r2, r1
 8002036:	40da      	lsrs	r2, r3
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <HAL_RCC_ClockConfig+0x20c>)
 800203a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800203c:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <HAL_RCC_ClockConfig+0x210>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe fc97 	bl	8000974 <HAL_InitTick>
 8002046:	0003      	movs	r3, r0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40022000 	.word	0x40022000
 8002054:	00001388 	.word	0x00001388
 8002058:	40021000 	.word	0x40021000
 800205c:	ffff84ff 	.word	0xffff84ff
 8002060:	fffff0ff 	.word	0xfffff0ff
 8002064:	ffff8fff 	.word	0xffff8fff
 8002068:	0800235c 	.word	0x0800235c
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800207a:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	2207      	movs	r2, #7
 8002082:	4013      	ands	r3, r2
 8002084:	3301      	adds	r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2238      	movs	r2, #56	@ 0x38
 800208e:	4013      	ands	r3, r2
 8002090:	d10f      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	2207      	movs	r2, #7
 800209a:	4013      	ands	r3, r2
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4819      	ldr	r0, [pc, #100]	@ (800210c <HAL_RCC_GetSysClockFreq+0x98>)
 80020a8:	f7fe f82e 	bl	8000108 <__udivsi3>
 80020ac:	0003      	movs	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e01e      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2238      	movs	r2, #56	@ 0x38
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e015      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80020c4:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2238      	movs	r2, #56	@ 0x38
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d103      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2238      	movs	r2, #56	@ 0x38
 80020de:	4013      	ands	r3, r2
 80020e0:	2b18      	cmp	r3, #24
 80020e2:	d103      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020e4:	23fa      	movs	r3, #250	@ 0xfa
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e001      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7fe f808 	bl	8000108 <__udivsi3>
 80020f8:	0003      	movs	r3, r0
 80020fa:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	40021000 	.word	0x40021000
 800210c:	02dc6c00 	.word	0x02dc6c00
 8002110:	00f42400 	.word	0x00f42400

08002114 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800211c:	2313      	movs	r3, #19
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002124:	2312      	movs	r3, #18
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2240      	movs	r2, #64	@ 0x40
 8002132:	4013      	ands	r3, r2
 8002134:	d100      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002136:	e079      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002138:	2011      	movs	r0, #17
 800213a:	183b      	adds	r3, r7, r0
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002140:	4b63      	ldr	r3, [pc, #396]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002142:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	055b      	lsls	r3, r3, #21
 8002148:	4013      	ands	r3, r2
 800214a:	d110      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b60      	ldr	r3, [pc, #384]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800214e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002150:	4b5f      	ldr	r3, [pc, #380]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0549      	lsls	r1, r1, #21
 8002156:	430a      	orrs	r2, r1
 8002158:	63da      	str	r2, [r3, #60]	@ 0x3c
 800215a:	4b5d      	ldr	r3, [pc, #372]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	055b      	lsls	r3, r3, #21
 8002162:	4013      	ands	r3, r2
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002168:	183b      	adds	r3, r7, r0
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800216e:	4b58      	ldr	r3, [pc, #352]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002170:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002172:	23c0      	movs	r3, #192	@ 0xc0
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4013      	ands	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d019      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	429a      	cmp	r2, r3
 8002188:	d014      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800218a:	4b51      	ldr	r3, [pc, #324]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800218c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218e:	4a51      	ldr	r2, [pc, #324]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002190:	4013      	ands	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002194:	4b4e      	ldr	r3, [pc, #312]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002196:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002198:	4b4d      	ldr	r3, [pc, #308]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	0249      	lsls	r1, r1, #9
 800219e:	430a      	orrs	r2, r1
 80021a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021a2:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021a6:	4b4a      	ldr	r3, [pc, #296]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a8:	494b      	ldr	r1, [pc, #300]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80021ae:	4b48      	ldr	r3, [pc, #288]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d016      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe fc36 	bl	8000a2c <HAL_GetTick>
 80021c0:	0003      	movs	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021c4:	e00c      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fc31 	bl	8000a2c <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a42      	ldr	r2, [pc, #264]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d904      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80021d6:	2313      	movs	r3, #19
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2203      	movs	r2, #3
 80021dc:	701a      	strb	r2, [r3, #0]
          break;
 80021de:	e004      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021e0:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	2202      	movs	r2, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d0ed      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80021ea:	2313      	movs	r3, #19
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f4:	4b36      	ldr	r3, [pc, #216]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	4a36      	ldr	r2, [pc, #216]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002204:	430a      	orrs	r2, r1
 8002206:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002208:	e005      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220a:	2312      	movs	r3, #18
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2213      	movs	r2, #19
 8002210:	18ba      	adds	r2, r7, r2
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002216:	2311      	movs	r3, #17
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002224:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002226:	492e      	ldr	r1, [pc, #184]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002228:	400a      	ands	r2, r1
 800222a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d009      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002236:	4b26      	ldr	r3, [pc, #152]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	2203      	movs	r2, #3
 800223c:	4393      	bics	r3, r2
 800223e:	0019      	movs	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002246:	430a      	orrs	r2, r1
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002254:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225a:	4013      	ands	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002264:	430a      	orrs	r2, r1
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2220      	movs	r2, #32
 800226e:	4013      	ands	r3, r2
 8002270:	d008      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002272:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	0899      	lsrs	r1, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002280:	430a      	orrs	r2, r1
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2204      	movs	r2, #4
 800228a:	4013      	ands	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002292:	4a15      	ldr	r2, [pc, #84]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002294:	4013      	ands	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	4013      	ands	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	22e0      	movs	r2, #224	@ 0xe0
 80022b2:	4393      	bics	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
  }
  return status;
 80022c0:	2312      	movs	r3, #18
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b006      	add	sp, #24
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000
 80022d4:	fffffcff 	.word	0xfffffcff
 80022d8:	fffeffff 	.word	0xfffeffff
 80022dc:	00001388 	.word	0x00001388
 80022e0:	efffffff 	.word	0xefffffff
 80022e4:	ffffcfff 	.word	0xffffcfff
 80022e8:	ffff3fff 	.word	0xffff3fff

080022ec <memset>:
 80022ec:	0003      	movs	r3, r0
 80022ee:	1882      	adds	r2, r0, r2
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d100      	bne.n	80022f6 <memset+0xa>
 80022f4:	4770      	bx	lr
 80022f6:	7019      	strb	r1, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	e7f9      	b.n	80022f0 <memset+0x4>

080022fc <__libc_init_array>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	2600      	movs	r6, #0
 8002300:	4c0c      	ldr	r4, [pc, #48]	@ (8002334 <__libc_init_array+0x38>)
 8002302:	4d0d      	ldr	r5, [pc, #52]	@ (8002338 <__libc_init_array+0x3c>)
 8002304:	1b64      	subs	r4, r4, r5
 8002306:	10a4      	asrs	r4, r4, #2
 8002308:	42a6      	cmp	r6, r4
 800230a:	d109      	bne.n	8002320 <__libc_init_array+0x24>
 800230c:	2600      	movs	r6, #0
 800230e:	f000 f819 	bl	8002344 <_init>
 8002312:	4c0a      	ldr	r4, [pc, #40]	@ (800233c <__libc_init_array+0x40>)
 8002314:	4d0a      	ldr	r5, [pc, #40]	@ (8002340 <__libc_init_array+0x44>)
 8002316:	1b64      	subs	r4, r4, r5
 8002318:	10a4      	asrs	r4, r4, #2
 800231a:	42a6      	cmp	r6, r4
 800231c:	d105      	bne.n	800232a <__libc_init_array+0x2e>
 800231e:	bd70      	pop	{r4, r5, r6, pc}
 8002320:	00b3      	lsls	r3, r6, #2
 8002322:	58eb      	ldr	r3, [r5, r3]
 8002324:	4798      	blx	r3
 8002326:	3601      	adds	r6, #1
 8002328:	e7ee      	b.n	8002308 <__libc_init_array+0xc>
 800232a:	00b3      	lsls	r3, r6, #2
 800232c:	58eb      	ldr	r3, [r5, r3]
 800232e:	4798      	blx	r3
 8002330:	3601      	adds	r6, #1
 8002332:	e7f2      	b.n	800231a <__libc_init_array+0x1e>
 8002334:	0800239c 	.word	0x0800239c
 8002338:	0800239c 	.word	0x0800239c
 800233c:	080023a0 	.word	0x080023a0
 8002340:	0800239c 	.word	0x0800239c

08002344 <_init>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234a:	bc08      	pop	{r3}
 800234c:	469e      	mov	lr, r3
 800234e:	4770      	bx	lr

08002350 <_fini>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr
